#!/usr/bin/env python
"""
Document Codebase

This script documents every file in the project using our existing tools
for AST analysis, code exploration, and documentation generation.
"""
# Fix imports for reorganized codebase
import utils.import_utils


# Fix imports for reorganized codebase



import os
import sys
import time

# Add project root to path for imports
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.append(project_root)

# Import our existing tools
try:
    # Import the code analysis functions we need
except ImportError as e:
    print(f"Error importing tools: {e}")
    print("Make sure you've run the reorganization scripts first.")
    sys.exit(1)

def document_codebase():
    """Document every file in the codebase using our existing tools."""
    print("\nðŸ“š Documenting Codebase")
    print("=" * 80)
    
    # Create output directory
    docs_dir = os.path.join(project_root, "docs", "auto_generated")
    ensure_dir(docs_dir)
    
    # Create index file
    index_path = os.path.join(docs_dir, "index.md")
    with open(index_path, "w", encoding="utf-8") as f:
        f.write("# Codebase Documentation\n\n")
        f.write("This documentation was automatically generated by analyzing the codebase.\n\n")
        f.write("## Table of Contents\n\n")
    
    # Find all Python files
    python_files = []
    for root, _, files in os.walk(project_root):
        # Skip certain directories
        if any(skip in root for skip in ['.git', '__pycache__', '.vscode', '.idea']):
            continue
        
        for file in files:
            if file.endswith('.py'):
                python_files.append(os.path.join(root, file))
    
    print(f"Found {len(python_files)} Python files to document")
    
    # Process each file
    for i, file_path in enumerate(python_files):
        rel_path = os.path.relpath(file_path, project_root)
        print(f"Documenting [{i+1}/{len(python_files)}]: {rel_path}")
        
        try:
            # Analyze the file using our existing tools
            file_info = analyze_file(file_path)
            
            # Generate documentation for this file
            doc_path = os.path.join(docs_dir, f"{rel_path.replace('/', '_').replace('\\', '_')}.md")
            
            with open(doc_path, "w", encoding="utf-8") as f:
                f.write(f"# {os.path.basename(file_path)}\n\n")
                f.write(f"**Path:** `{rel_path}`\n\n")
                
                # Add file docstring if available
                if file_info['semantics'].get('docstring'):
                    f.write("## Description\n\n")
                    f.write(file_info['semantics']['docstring'] + "\n\n")
                
                # Add metrics
                f.write("## Metrics\n\n")
                f.write(f"- **Lines of Code:** {file_info['metrics']['loc']}\n")
                f.write(f"- **Functions:** {file_info['metrics']['functions']}\n")
                f.write(f"- **Classes:** {file_info['metrics']['classes']}\n")
                f.write(f"- **Imports:** {file_info['metrics']['imports']}\n")
                f.write(f"- **Complexity:** {file_info['metrics']['complexity']}\n\n")
                
                # Add imports
                if file_info['semantics'].get('imports'):
                    f.write("## Imports\n\n")
                    for imp in file_info['semantics']['imports']:
                        module = imp.get('module', '')
                        alias = imp.get('alias', '')
                        imp_type = imp.get('type', '')
                        
                        if alias:
                            f.write(f"- `{imp_type} {module} as {alias}`\n")
                        else:
                            f.write(f"- `{imp_type} {module}`\n")
                    f.write("\n")
                
                # Add classes
                if file_info['semantics'].get('classes'):
                    f.write("## Classes\n\n")
                    for cls in file_info['semantics']['classes']:
                        f.write(f"### {cls['name']}\n\n")
                        if cls.get('docstring'):
                            f.write(cls['docstring'] + "\n\n")
                        
                        # Add methods
                        if cls.get('methods'):
                            f.write("#### Methods\n\n")
                            for method in cls['methods']:
                                f.write(f"- `{method}`\n")
                            f.write("\n")
                        
                        # Add bases
                        if cls.get('bases'):
                            f.write("#### Inherits From\n\n")
                            for base in cls['bases']:
                                if base:  # Only add non-empty bases
                                    f.write(f"- `{base}`\n")
                            f.write("\n")
                
                # Add functions
                if file_info['semantics'].get('functions'):
                    f.write("## Functions\n\n")
                    for func in file_info['semantics']['functions']:
                        args_str = ", ".join(func.get('args', []))
                        f.write(f"### `{func['name']}({args_str})`\n\n")
                        if func.get('docstring'):
                            f.write(func['docstring'] + "\n\n")
                        f.write(f"**Complexity:** {func.get('complexity', 1)}\n\n")
                
                # Add keywords
                if file_info['semantics'].get('keywords'):
                    f.write("## Keywords\n\n")
                    keywords_str = ", ".join(file_info['semantics']['keywords'])
                    f.write(f"`{keywords_str}`\n\n")
            
            # Update index file
            with open(index_path, "a", encoding="utf-8") as f:
                f.write(f"- [{rel_path}]({os.path.basename(doc_path)})\n")
            
        except Exception as e:
            print(f"Error documenting {rel_path}: {str(e)}")
    
    print(f"\nâœ… Documentation generated in {docs_dir}")
    print(f"ðŸ“‘ Index file: {index_path}")

def main():
    """Main function."""
    start_time = time.time()
    document_codebase()
    print(f"\nTotal documentation time: {time.time() - start_time:.2f}s")

if __name__ == "__main__":
    main()
